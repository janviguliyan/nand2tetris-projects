// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //a
    //b
    //  sel
    // sel*a*b + !sel*a*b
    // sel0*sel1*a*b*c*d + sel0*!sel1*a*b*c*d + !sel0*sel1*a*b*c*d + !sel0*!sel1*a*b*c*d 
    // 0000000000010001

    // implementing zx
    Mux16(a=x, b=false, sel=zx, out=out1);

    // implementing nx
    Not16(in=out1, out=out1Not);
    Mux16(a=out1, b=out1Not, sel=nx, out=out2);

    // implementing zy
    Mux16(a=y, b=false, sel=zy, out=out3);

    // implementing ny
    Not16(in=out3, out=out3Not);
    Mux16(a=out3, b=out3Not, sel=ny, out=out4);

    // implementing f
    And16(a=out2, b=out4, out=and24);
    Add16(a=out2, b=out4, out=add24);
    Mux16(a=and24, b=add24, sel=f, out=out5);
    // HalfAdder16(a=out2, b=out4, sum=sum24, carry=carry);
    
    // implementing out
    Not16(in=out5, out=out5Not);
    Mux16(a=out5, b=out5Not, sel=no, out[0..7]=outSplit1, out[8..14]=outSplit2, out[15]=outSplit3);

    // splitting because we need to zr and ng as 1 bit and thus need to convert 16 bit input to 1 bit output
    //UPDATE:
    // b can be true or false doesn't matter as 
    // MUX Boolean expression is: sel*a + !sel*b
    // is sel is true-->1 then b will be out thus sel is false for a to be out 
    Mux16(a[0..7]=outSplit1, a[8..14]=outSplit2, a[15]=outSplit3, b=false, sel=false, out=out); 
    Or8Way(in=outSplit1, out=outOr);
    Or8Way(in[0..6]=outSplit2, in[7]=outSplit3, out=outOr2);
    Or(a=outOr, b=outOr2, out=outOr3);
    Not(in=outOr3, out=zr);
    // ng
    Or(a=outSplit3, b=false, out=ng);
    // Replace this comment with your code.
}